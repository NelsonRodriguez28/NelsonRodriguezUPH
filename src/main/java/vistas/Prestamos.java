/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package vistas;

import com.mycompany.biblioteca.Cconexion;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import javax.swing.JOptionPane;

/**
 *
 * @author NelsonRO
 */
public class Prestamos extends javax.swing.JPanel {

    /**
     * Creates new form Prestamos
     */
    public Prestamos() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtidusuario = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtidlibro = new javax.swing.JTextPane();
        jLabel3 = new javax.swing.JLabel();
        btnprestar = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 204, 204));
        setPreferredSize(new java.awt.Dimension(900, 600));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        jLabel1.setText("Solicitud de Prestamo de Libros");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel2.setText("ID del Usuario ");

        jScrollPane1.setViewportView(txtidusuario);

        jScrollPane2.setViewportView(txtidlibro);

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel3.setText("ID del Libro ");

        btnprestar.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        btnprestar.setText("PRESTAR");
        btnprestar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnprestarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(217, 217, 217)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(btnprestar)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(228, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jLabel1)
                .addGap(58, 58, 58)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60)
                .addComponent(btnprestar)
                .addContainerGap(245, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    
    
     
                                              

    private boolean validarDatosNumericos(String texto) {
        try {
            Integer.parseInt(texto);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    private boolean validarIdUsuario(int idUsuario) {
        String query = "SELECT COUNT(*) FROM usuarios WHERE idusuarios = ?";
        try (Connection conn = Cconexion.establecerConexion();
             PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setInt(1, idUsuario);
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt(1) > 0;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al validar el usuario: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        return false;
    }

    private boolean validarIdLibro(String idLibro) {
        String query = "SELECT * FROM libros WHERE idlibro = ?";
        try (Connection conn = Cconexion.establecerConexion();
             PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setString(1, idLibro);
            try (ResultSet rs = pstmt.executeQuery()) {
                return rs.next(); // Devuelve true si encuentra al menos un registro
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al validar el ID del libro: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        return false;
    }

    private int realizarPrestamo(int idUsuario, String idLibro) {
        int idPrestamo = -1; // Inicializar el ID del préstamo

        // Obtener la fecha actual
        Timestamp fechaPrestamo = new Timestamp(System.currentTimeMillis());

        String query = "INSERT INTO prestamos (idlibro, idusuarios, fecha_prestamo) VALUES (?, ?, ?)";
        try (Connection conn = Cconexion.establecerConexion();
             PreparedStatement pstmt = conn.prepareStatement(query, PreparedStatement.RETURN_GENERATED_KEYS)) {
            pstmt.setString(1, idLibro);
            pstmt.setInt(2, idUsuario);
            pstmt.setTimestamp(3, fechaPrestamo);
            pstmt.executeUpdate();

            // Obtener el ID del préstamo generado
            ResultSet rs = pstmt.getGeneratedKeys();
            if (rs.next()) {
                idPrestamo = rs.getInt(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al registrar el préstamo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

        return idPrestamo;
    }
    private void btnprestarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnprestarActionPerformed
String idUsuarioStr = txtidusuario.getText().trim();
        String idLibroStr = txtidlibro.getText().trim();

        // Validar que ambos campos no estén vacíos
        if (idUsuarioStr.isEmpty() || idLibroStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, complete ambos campos.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validar que los IDs sean números enteros
        if (!validarDatosNumericos(idUsuarioStr) || !validarDatosNumericos(idLibroStr)) {
            JOptionPane.showMessageDialog(this, "Los IDs deben ser números enteros.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int idUsuario = Integer.parseInt(idUsuarioStr);

        // Validar ID de usuario
        if (!validarIdUsuario(idUsuario)) {
            JOptionPane.showMessageDialog(this, "El ID del usuario no se encontró.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validar ID de libro
        if (!validarIdLibro(idLibroStr)) {
            JOptionPane.showMessageDialog(this, "El ID del libro no se encontró.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Si ambos ID son válidos, registrar el préstamo
        int idPrestamo = realizarPrestamo(idUsuario, idLibroStr);
        if (idPrestamo != -1) {
            JOptionPane.showMessageDialog(this, "Préstamo realizado con éxito. ID de préstamo: " + idPrestamo);
        } else {
            JOptionPane.showMessageDialog(this, "Error al realizar el préstamo.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        // Limpiar campos después de realizar el préstamo
        txtidlibro.setText("");
        txtidusuario.setText("");
    }//GEN-LAST:event_btnprestarActionPerformed





    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnprestar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextPane txtidlibro;
    private javax.swing.JTextPane txtidusuario;
    // End of variables declaration//GEN-END:variables
}
